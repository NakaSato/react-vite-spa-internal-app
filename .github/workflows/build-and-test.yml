name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type to use"
        required: true
        default: "vite"
        type: choice
        options:
          - vite
          - dev
          - analyze
          - fast

env:
  BUN_VERSION: "latest"

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: TypeScript type check
        run: bun run type-check

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun run test:run

      - name: Run tests with coverage
        run: bun run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]

    strategy:
      matrix:
        build-config:
          - name: "Production Build (Vite)"
            command: "build:vite"
            artifact: "build-vite"
          - name: "Development Build"
            command: "build:dev"
            artifact: "build-dev"
          - name: "Bundle Analysis"
            command: "build:analyze"
            artifact: "build-analyze"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build - ${{ matrix.build-config.name }}
        run: bun run ${{ matrix.build-config.command }}
        env:
          NODE_ENV: production

      - name: Generate build info
        run: |
          echo "## Build Information" > build-info.md
          echo "" >> build-info.md
          echo "**Build Type**: ${{ matrix.build-config.name }}" >> build-info.md
          echo "**Command**: \`bun run ${{ matrix.build-config.command }}\`" >> build-info.md
          echo "**Commit**: \`${{ github.sha }}\`" >> build-info.md
          echo "**Branch**: \`${{ github.ref_name }}\`" >> build-info.md
          echo "**Build Time**: $(date)" >> build-info.md
          echo "" >> build-info.md

          if [ -d "dist" ]; then
            echo "**Build Size**: $(du -sh dist/ | cut -f1)" >> build-info.md
            echo "" >> build-info.md
            echo "**Files**:" >> build-info.md
            echo "\`\`\`" >> build-info.md
            find dist/ -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -20 | xargs ls -lh >> build-info.md
            echo "\`\`\`" >> build-info.md
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build-config.artifact }}-${{ github.run_number }}
          path: |
            dist/
            build-info.md
            stats.json
          retention-days: 14
          compression-level: 9

  preview-test:
    name: Preview and Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-vite-${{ github.run_number }}
          path: ./

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Start preview server
        run: |
          bun run preview:port &
          sleep 10

      - name: Test preview server
        run: |
          # Basic health check
          curl -f http://localhost:4173/ || exit 1
          echo "Preview server is running successfully"

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, preview-test]
    if: always()

    steps:
      - name: Create build summary
        uses: actions/github-script@v7
        with:
          script: |
            const lintResult = '${{ needs.lint-and-typecheck.result }}';
            const testResult = '${{ needs.test.result }}';
            const buildResult = '${{ needs.build.result }}';
            const previewResult = '${{ needs.preview-test.result }}';

            const getStatusIcon = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚ö†Ô∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };

            const summary = `
            ## üèóÔ∏è Build and Test Summary

            **Commit**: \`${{ github.sha }}\`
            **Branch**: \`${{ github.ref_name }}\`
            **Triggered by**: ${{ github.event_name }}
            **Build Number**: #${{ github.run_number }}

            ### Pipeline Results

            | Stage | Status | Details |
            |-------|---------|---------|
            | Lint & Type Check | ${getStatusIcon(lintResult)} ${lintResult} | TypeScript compilation and linting |
            | Tests | ${getStatusIcon(testResult)} ${testResult} | Unit tests with coverage |
            | Build | ${getStatusIcon(buildResult)} ${buildResult} | Multi-config builds (Vite, Dev, Analyze) |
            | Preview Test | ${getStatusIcon(previewResult)} ${previewResult} | Preview server validation |

            ### Build Artifacts
            - **Production Build**: Ready for deployment
            - **Development Build**: Available for testing
            - **Bundle Analysis**: Performance insights available
            - **Coverage Reports**: Test coverage metrics

            ### Available Scripts
            - \`bun run build\` - Production build
            - \`bun run build:dev\` - Development build  
            - \`bun run build:analyze\` - Build with bundle analysis
            - \`bun run test:run\` - Run tests
            - \`bun run test:coverage\` - Tests with coverage
            - \`bun run preview\` - Preview built application

            ### Next Steps
            ${lintResult === 'success' && testResult === 'success' && buildResult === 'success' ? 
              'üéâ All checks passed! Ready for deployment.' : 
              '‚ö†Ô∏è Some checks failed. Please review the pipeline results.'
            }
            `;

            console.log(summary);
            core.summary.addRaw(summary);
            await core.summary.write();

            // Add PR comment if this is a pull request
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
