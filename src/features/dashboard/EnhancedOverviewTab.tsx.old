import React from "react";
import {
  Box,
  Card,
  CardContent,
  Typography,
  LinearProgress,
  Chip,
  Avatar,
  Divider,
} from "@mui/material";
import {
  TrendingUp,
  AccountBalance,
  ElectricBolt,
  Assessment,
} from "@mui/icons-material";
import { Project } from "../../shared/types/project";
import {
  getStatusColor,
  formatCurrency,
  formatCapacity,
} from "../../shared/utils/projectHelpers";

interface ProjectStats {
  totalProjects: number;
  totalBudget: number;
  totalSpent: number;
  totalCapacity: number;
  budgetUtilization?: number;
  statusDistribution?: Record<string, number>;
}

interface EnhancedOverviewTabProps {
  projects: Project[];
  stats?: ProjectStats | null;
  statsLoading?: boolean;
}

const EnhancedOverviewTab: React.FC<EnhancedOverviewTabProps> = ({
  projects,
  stats,
  statsLoading = false,
}) => {
  // Fallback to local calculation if stats not available
  const totalBudget =
    stats?.totalBudget ?? projects.reduce((sum, p) => sum + p.budget, 0);
  const totalSpent =
    stats?.totalSpent ?? projects.reduce((sum, p) => sum + p.spent, 0);
  const totalCapacity =
    stats?.totalCapacity ??
    projects.reduce((sum, p) => {
      const size = parseFloat(p.systemSize);
      return sum + (p.systemSize.includes("MW") ? size * 1000 : size);
    }, 0);
  const budgetUtilization =
    stats?.budgetUtilization ??
    (totalBudget > 0 ? (totalSpent / totalBudget) * 100 : 0);
  const totalProjects = stats?.totalProjects ?? projects.length;

  const keyMetrics = [
    {
      title: "Total Projects",
      value: totalProjects.toString(),
      icon: <Assessment sx={{ color: "#1976d2" }} />,
      color: "#e3f2fd",
    },
    {
      title: "Total Budget",
      value: formatCurrency(totalBudget),
      subtitle: `Spent: ${formatCurrency(totalSpent)}`,
      icon: <AccountBalance sx={{ color: "#388e3c" }} />,
      color: "#e8f5e8",
    },
    {
      title: "Total Capacity",
      value: formatCapacity(totalCapacity),
      subtitle: "Solar Installation",
      icon: <ElectricBolt sx={{ color: "#f57c00" }} />,
      color: "#fff3e0",
    },
    {
      title: "Budget Utilization",
      value: `${budgetUtilization.toFixed(1)}%`,
      progress: budgetUtilization,
      icon: <TrendingUp sx={{ color: "#7b1fa2" }} />,
      color: "#f3e5f5",
    },
  ];

  return (
    <Box sx={{ p: 3 }}>
      {/* Key Metrics */}
      <Typography variant="h5" gutterBottom sx={{ mb: 3, fontWeight: 600 }}>
        Project Overview
      </Typography>

      <Box
        sx={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fit, minmax(280px, 1fr))",
          gap: 3,
          mb: 4,
        }}
      >
        {keyMetrics.map((metric, index) => (
          <Card key={index} sx={{ borderRadius: 2, boxShadow: 2 }}>
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
                <Avatar sx={{ bgcolor: metric.color, mr: 2 }}>
                  {metric.icon}
                </Avatar>
                <Box sx={{ flexGrow: 1 }}>
                  <Typography
                    variant="h4"
                    component="div"
                    sx={{ fontWeight: 700 }}
                  >
                    {metric.value}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {metric.title}
                  </Typography>
                </Box>
              </Box>

              {metric.subtitle && (
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{ mb: 1 }}
                >
                  {metric.subtitle}
                </Typography>
              )}

              {metric.progress !== undefined && (
                <Box sx={{ mt: 2 }}>
                  <LinearProgress
                    variant="determinate"
                    value={Math.min(metric.progress, 100)}
                    sx={{ height: 6, borderRadius: 3 }}
                  />
                </Box>
              )}
            </CardContent>
          </Card>
        ))}
      </Box>

      {/* Recent Projects */}
      <Card sx={{ borderRadius: 2, boxShadow: 2 }}>
        <CardContent sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom sx={{ mb: 3, fontWeight: 600 }}>
            Recent Projects
          </Typography>

          {projects.slice(0, 5).map((project, index) => (
            <Box key={project.id}>
              <Box sx={{ display: "flex", alignItems: "center", py: 2 }}>
                <Box sx={{ flexGrow: 1 }}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                    {project.name}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {project.location} â€¢ {project.systemSize}
                  </Typography>
                  <Box
                    sx={{
                      mt: 1,
                      display: "flex",
                      alignItems: "center",
                      gap: 1,
                    }}
                  >
                    <LinearProgress
                      variant="determinate"
                      value={project.progress}
                      sx={{
                        flexGrow: 1,
                        height: 6,
                        borderRadius: 3,
                        maxWidth: 200,
                      }}
                    />
                    <Typography variant="body2" color="text.secondary">
                      {project.progress}%
                    </Typography>
                  </Box>
                </Box>

                <Box sx={{ textAlign: "right", ml: 2 }}>
                  <Chip
                    label={project.status}
                    size="small"
                    sx={{ mb: 1 }}
                    color={
                      project.status === "Completed"
                        ? "success"
                        : project.status === "Construction"
                        ? "primary"
                        : project.status === "Planning"
                        ? "warning"
                        : "default"
                    }
                  />
                  <Typography variant="body2" color="text.secondary">
                    {formatCurrency(project.budget)}
                  </Typography>
                </Box>
              </Box>
              {index < projects.slice(0, 5).length - 1 && <Divider />}
            </Box>
          ))}

          {projects.length === 0 && (
            <Typography
              variant="body2"
              color="text.secondary"
              sx={{ textAlign: "center", py: 4 }}
            >
              No projects available
            </Typography>
          )}
        </CardContent>
      </Card>
    </Box>
  );
};

export default EnhancedOverviewTab;
